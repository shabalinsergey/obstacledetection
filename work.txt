Лабораторная работа

Определение глубины изображения, поиск препятствий, вычисление расстояния до найденных объектов по двум стереоизображениям. 

Цель лабораторной работы - получение информации о препятствиях и расчет расстояния до них по данным, получаемым в процессе обработки двух стереоизображений. 

Этапы обработки изображения. 

1. Калибровка камеры, получение матрицы искажений оптической системы.
2. Устранение искажений двух стереоизображений.
3. Получение карты глубин стереоизображения.
4. Фильтрация карты глубин стереоизображения.
5. Поиск объектов, обработка изображения.
6. Вычисление расстояний до найденных объектов. 

Описание программы для выполнения лабораторной работы

Программа состоит из четырех файлов: 

main.py - основной алгоритм программы; вызов функций, описанных в прочих файлах. 
calibration.py - функция получения матрицы искажений оптической системы
rectifying.py - функция устранения искажений двух стереоизображений
depth_calculating.py - фукнция получения карты глубин, функция поиска объектов на изображении, фукнция расчета расстояний до найденных объектов
			функция вывода результатов обработки на исходном изображении 

В файле main.py прописаны пути до изображений:
 
image_left_path ='./images/LeftImage_name.jpg' (1) - левое изображение
image_right_path='./images/RightImage_name.jpg' (2) - правое изоражение
images_for_calibrating_path= './chessboard/*.jpg' (3) - каталог для калибровочных изображений

Ход выполнения лабораторной работы

1. Необходимо сделать набор фотографий (около 10 шт) шахматной доски под всевозможными углами с помощью камеры, 
которая будет использоваться для проведения лабораторной работы.  

Это нужно для того, чтобы получить матрицу искажений для конкретно вашей камеры (изображения с камеры имеют искажения по углам) 
для приведения изображения к истинному 2D виду.

Изображение калибровочной шахматной доски лежит в корне с именем "calib_image.jpg"

2. Положить полученные изображения шахматной доски в каталог './chessboard/.' с именами '1.jpg', '2.jpg', ..., 'n-1.jpg','n.jpg'.

В файле main.py прописан путь до этих изображений: images_for_calibrating_path= './chessboard/*.jpg'

3. Сделать два снимка с камеры со смещением 10 см в направлении, перпендикулярном оптической оси камеры (имитация стереозрения). 

Поместить снимки в каталог

'./images/LeftImage_name.jpg' 
'./images/RightImage_name.jpg'

4. Провести калибровку камеры и получить матрицу искажений с помощью функции: 

DistortionMatrix = CalibrateCamera(images_for_calibrating_path)

Функция возвращает матрицу искажений, которая используется далее для устранения искажений. 

5. Устранить искажения камеры на полученной ранее стереопаре изображений: 

imgR_rectified = GetUndistortedImage(image_right_path, DistortionMatrix)
imgL_rectified = GetUndistortedImage(image_left_path, DistortionMatrix)

6. Получить карту глубины изображения filteredDisparity по стереопаре изображений с помощью функции 

disparity_left, disparity_right, filteredDisparity = GetDisparityMap(imgL_rectified, imgR_rectified)

7. Провести анализ полученной карты глубин на предмет наличия препятствий и объектов. 


Необходимо написать функцию FindAnObstacle(filteredDisparity,output_image), которая будет выполнять обработку карты глубин (filteredDisparity). 

Функция должна решать задачу поиска объектов на изображении и возвращать массив object_centers, который содержит центры объектов 
[(X1,Y1),(X2,Y2),...,(Xn-1,Yn-1),(Xn,Yn)]

Также функция должна "рисовать" на изображении output_image контуры найденных объектов. 


8. Написать функцию CalculateDistance(object_centers,disparity_image) расчета расстояний до центров найденных объектов по формуле

distance = focus_length*Baseline/Disparity, где

focus_length - фокусное расстояние оптической системы
Baseline - смещение между оптическими осями двух кадров
Disparity - глубина изображения 

Поскольку при определении фокусного расстояния камеры возникает много погрешностей, можно ввести ряд упрощений. 
Измерить истинное расстояние до определенных объектов рулеткой, затем определить значение focus_length*Baseline экспериментально, 
то есть использовать такое значение, при котором достигается наибольшая точность вычисления. 

Функция должна выполнять расчет расстояния до каждого из найденных объектов и возвращать массив, содержащий дистанции до объектов. 

9. Написать функцию вывода результатов ImagePutDistance(image, object_centers, distance) на исходном изображении. 
Функция должна производить вывод результатов расчета дистанции до каждого из объектов на исходном изображении в центре каждого объекта. 

Итогом выполнения лабораторной работы является исходное изображение, на котором выведены контуры объектов и расстояния до каждого из них. 


